RTFM-Core v1.0 Per Lindgren (C) 2014
-------------------------------------------------------------------------------
History
2014-07-18                      v1.0 development branch

-------------------------------------------------------------------------------
DISTRIBUTION AND DIRECTORY STRUCTURE
RTFM-core                       RTFM-core compiler v1.0
->src                           source files
                                ./make to build compiler script
                                ./make X build applicaiton X script
                                ./makedot X build application X with dot out
                                ./makeinstall <path>
                                copies "core" to directory <path> 

PTCORE                          RTFM-core Pthread run-time (OSX/Linux)
->RTFM_SRC                      Source .core files (including examples)
->RTFM_PT                       Pthread run-time
->Application                   Used for the autogenerated autogen.c
->Debug                         ./make to build and run application
                                ./makedebug to build and run in debug mode

RTFM-KM3                        RTFM-core ARM Cortex M3 Kernel

-------------------------------------------------------------------------------
PREPARATION OSX

OSX-MAVERICS 10.9
XCode                           Latest XCODE command line tools
XQartz 2.7.6                    Optional (used e.g., by ZATHURA)

OSX port installations          Please refer to general info on OSX PORT system

sudo port install ocaml         OCAML compiler
sudo port install opam          We use OPAM for the OCAML related installations
opam init                       The OPAM system needs to be initially configured
opam config env                 run after OPAM init
opam install menhir             Our Parser generator (installs ocamlfind also)

This should be enough to build and run the RTFM-core compiler under OSX

sudo port install graphviz      Used to compile generated .dot files 
                                (this package has a lot of dependencies so it 
                                takes a while to install)
sudo port install graphviz-gui  Optional
sudo port install zathura*      ZATHURA is a lightweight pdf viewer that can be 
                                used instead of the built in OSX preview 
                                (* makes it install some plugins needed)
                                Uses X11
 
PREPARATION LINUX

Ubuntu 12.04/14.04              Should work on any modern LINUX

sudo apt-get install ocaml      OCAML compiler
sudo apg-get install opam       We use OPAM for the OCAML related installations
opam init                       The OPAM system needs to be initially configured
opam config env                 run after OPAM init
opam install menhir             Our Parser generator (installs ocamlfind also)

This should be enough to build and run the RTFM-core compiler under Linux

sudo port install graphviz      Used to compile generated .dot files 
                                (this package has a lot of dependencies so it 
                                takes a while to install)
sudo port install graphviz-gui  Optional
sudo port install zathura*      ZATHURA is a lightweight pdf viewer that can be 
                                used instead of the built in OSX preview 
                                (* makes it install some plugins needed)


-------------------------------------------------------------------------------
EXAMPLE SETUP 

Eclipse LUNA (4.4)              Start from C/C++ prepacked distribution
                                or install C/C++ plugins
OCAML ODT plugin                See http://ocamldt.free.fr/spip.php?article5

Workspace                       Root for your RTFM-core developments
PTCORE                          C project for the run-time
                                create as existing code with Makefile
                                
                                You can get eclipse to auto generate the makefile 
                                It will be placed in the directory of the (active)
                                configuration (e.g., Default, Debug etc.)
                                
                                You may create several configurations, and switch between
                                those in eclipse.
                                
                                NOTICE, under OSX/Linux for each configuration you need to add 
                                
                                PTCORE Properties
                                 |C/C++ Build
                                  |Settings
                                   |Tool Settings
                                    |Symbols
                                     |Defined Symbols -D
                                      POSIX      
                                
                                If you want DEBUG output from the run-time, add
                                     |Defined Symbols -D
                                      DEBUG 
                                      DEBUG_PT
                                      
                                You should exlude the Appication/augotgen.c from the      
                                atomatic builder (it is included by the run-time)
                                To this end, select the file, goto and check/cross
                                PTCORE/Application/Properties
                                 | Exclude resource from build  
                                 
                                This option is also available as a "filter" 
                                PTCORE Properties
                                 |C/C++ General
                                  |Paths and Symbols
                                   |[Source Location]
                                    |PTCORE
                                     |Filter Application/autogen.c
                                
RTFM-core-compiler              OCaml project for the compiler

RTFM-KM3                        Optional Cross C project for ARM Cortex target

-------------------------------------------------------------------------------
USEAGE  

core                            RTFM-core v1.0 compiler
                                core -h for options   
                                
PTCORE                          Running you application under Pthreads                                  
                                Use the ./make script (it cleans, builds and executes).
                                In order to operated on threads at low level, it needs to
                                be run as "sudo", hence you will be asked for passwd
                                
                                You may also manually invoke 
                                make clean
                                make
                                sudo ./PTCORE
                                (in either of your configurations (e.g., Debug/Default)
                                
                                You may also greate your own makefiles:
                                Basically all you need is to compile  
                                gcc [-D POSIX] [-D DEBUG] [-D DEBUG_PT] RTFM-PT.c -o PTCORE -lpthread
                                
                                and run
                                sudo ./PTCORE
                                
                                Technical Note: 
                                We use named semaphores under OSX.
                                
                                As a system in CORE is "static" and assumed to run "forever"
                                there is no notion of ending an application in CORE.
                                This is done through the environment (OSX/Linux) and we
                                rely on its ability to clean things up.
                                However, OSX deos not clean out named semaphores 
                                automatically. 
                                
                                Instead we do it before "opening" the sempahore.
                                
                                First time we will create a warning when trying to "un_link"
                                previous instances of the named semaphore (since there is no).
                                
                                On a second invocation the named emaphore is there and will be 
                                successfully "un_link"ed by the run-time.
                                
                                OSX, does not correclty report the error on trying to
                                unlink a named semaphore (should report errno=ENOENT) but it 
                                does not (it seems). So we report this as a warning (if DEBUG).
                                
                                
                                
                                
                                
                                