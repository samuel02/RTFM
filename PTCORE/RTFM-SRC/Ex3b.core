// Ex3b.core
// Per Lindgren (C) 2014
//
// Critical sections are used to protect shared resources
#>
// Top level C-code in -core used e.g., tp
// define a shared variable point (x,y), protected by R
volatile int x;
volatile int y;
<#

Task t1() {
    #>printf("task1\n");<#
    // use TRACE/TRACE_OS to see that task1 will be blocked when trying to claim R
    claim R {
        #>printf("task1 R claimed, point is (%d,%d)\n", x, y);<#
    }
}

Task t2() {
    #>printf("task2\n");<#
    claim R {
        #>
        x=1;
        printf("task2 R claimed\n");
        RT_usleep(RT_sec*5);
        y=1;
        printf("task2 R released\n");
        <#
    }
}

Reset {
	#>x = 0; y = 0;<#
    #>printf("User reset\n");<#
    async before 1s t2(); // will take at least 5s, hence infeasible
    async after 1 s before 10 s t1();     
}