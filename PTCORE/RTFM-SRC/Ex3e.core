// Ex3d.core
// Per Lindgren (C) 2014

// Program free of potential deadlock, at the cost of increased blocking 

Task t1() {
    #>printf("task1\n");<#
    claim R1 {
        #>printf("task1 R1 claimed\n");<#
        #>RT_usleep(RT_sec*1);<#
        claim R2 {
            #>printf("task1 R2 claimed\n");<#
        }
    }
}

Task t2() {
    #>printf("task2\n");<#
    claim R1 { // moved outwards
        #>printf("task2 R1 claimed\n");<#
    	claim R2 {
    	    #>RT_usleep(RT_sec*1);<# // now also affects R1
            #>printf("task2 R1,R2 claimed\n");<#
        }
    }
}

Reset {
    #>printf("User reset\n");<#
    async t1();
    async t2();
}
