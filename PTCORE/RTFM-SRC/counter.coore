class IO<void (char) handle_input> extern "Websocket.core" {
  extern void ws_send(int);
  extern void idle_websocket();

  Task client_receive(char msg) {
    handle_input(msg);
  }

  void print(int seconds) {
    ws_send(seconds);
  }

  void setup() {
    idle_websocket();
  }
}

class Sequence<> {
  string correct := "4 8 15 16 23 42";
  int string_length := 15;
  int cursor := 0;

  void handle_input(char input) {
    if (input == correct[cursor]) cursor := cursor + 1;

    bool is_complete := is_complete(0);
    if(is_complete) reset();
  }

  bool is_complete(int foo) {
    return cursor == string_length;
  }

  void reset() {
    cursor := 0;
  }
}

class Timer<int secs, void (int) handle_output, bool (int) reset_condition> {
  int seconds := secs;

  Task tick () {
    seconds := seconds - 1;
    handle_output(seconds);
    if (seconds >= 0) async after 1 s tick();

    bool condition := reset_condition(0);
    if(condition) reset();
  }

  void reset() {
    seconds := secs;
  }
}

class Root<> {
  IO<> io;
  Sequence<> sequence;
  Timer<108, io.print, sequence.is_complete> timer;

  Reset {
    RT_printf("Reset!\n");
  }

  Idle {
    async timer.tick();
    io.setup();
  }
}
