// Top-level C-code used for non-blocking user input
#>
#include <termios.h>
#include <string.h>

#define ENABLE 0
#define DISABLE 1
#define ORIGINAL_TIME 108 * 60

volatile int seconds = ORIGINAL_TIME;
char sequence[16];
int seq_n = 0;
const char* correct = "4 8 15 16 23 42\n";
int keepon = 1;
int frequency = 0;

// Function for setting up the terminal
// to work in non-canonical mode and disable
// echoing.
void setup_tty(int state) {
  struct termios ttystate;

  //get the terminal state
  tcgetattr(STDIN_FILENO, &ttystate);

  if (state == ENABLE) {
    //turn off canonical mode
    ttystate.c_lflag &= ~ICANON;
    //minimum of number input read.
    ttystate.c_cc[VMIN] = 1;
    // disable echo
    ttystate.c_lflag &= ~ECHO;
  } else if (state == DISABLE) {
    //turn on canonical mode
    ttystate.c_lflag |= ICANON;
    // enable echoing
    ttystate.c_lflag |= ECHO;
  }
  //set the terminal attributes.
  tcsetattr(STDIN_FILENO, TCSANOW, &ttystate);
}

void make_sound() {
  printf("\07");
}

// Set beep frequency for some intervals
void set_frequency() {
  if(seconds <= 240 && seconds > 60) {
    frequency = 1;
  } else if(seconds <= 60 && seconds > 10) {
    frequency = 2;
  } else if(seconds <= 10 && seconds > 0) {
    frequency = 3;
  }
}

<#

// Task that will call itself and update
// the timer every second also it will update
// the output.
Task updateTimer () {
  claim Seconds {
    #> seconds--; <#
  }

  #> set_frequency(); <#

  async before 20 ms updateOutput();
  async after 1 s updateTimer ();
}

// Update the user interface
Task updateOutput () {
  claim Sequence {
    #>
    printf("\r%03d%c[0;30;47m%02d%c[0;39;49m\t\t\x1b[32m>:%s\x1b[0m", seconds/60, 27, seconds%60, 27, sequence);
    int i;
    for (i=0; i<16-seq_n;i++) {
      printf("\b");
    }
    fflush(stdout);
    <#
  }
}

// Will cause a beep every third second if
// frequency is set to one otherwise silent.
Task threeSecondBeep () {
  #> if (frequency == 1) make_sound(); <#
  async after 3 s before 3 s threeSecondBeep();
}

// Will cause a beep every second second if
// frequency is set to one otherwise silent.
Task twoSecondBeep () {
  #> if (frequency == 2) make_sound(); <#
  async after 2 s before 2 s twoSecondBeep();
}

// Will cause a beep every second if
// frequency is set to one otherwise silent.
Task oneSecondBeep () {
  #> if (frequency == 3) make_sound(); <#
  async after 1 s before 1 s oneSecondBeep();
}

// Start timer task as well as beep tasks
Reset {
  #>
  printf("User reset!!!\n");
  strncpy(sequence, "                ", 16);
  <#
  async updateTimer();
  async threeSecondBeep();
  async twoSecondBeep();
  async oneSecondBeep();
}


Idle {
  #>
  char c;
  int new_input = 0;

  // Enter non-canonical mode and disable echoing
  setup_tty(ENABLE);

  while(keepon) {
    // Check if there is any user input
    new_input = fgetc(stdin);

    if (new_input != 0) {

      // Check if input is part of correct sequence
      if (new_input == correct[seq_n]) {
        <#
          claim Sequence {
        #>
          sequence[seq_n] = new_input;
          seq_n++;
        <#
        }

        #>
        // Check if user has entered the entire correct sequence
        if (strncmp(correct, sequence, strlen(correct)) == 0) {
        <#
          claim Seconds {
            // Reset timer
            #> seconds = ORIGINAL_TIME; <#
          }
          claim Sequence {
            // Reset user input
            #> strncpy(sequence, "                ", 16); <#
          }
          #> seq_n = 0; <#
        #>
        }
        <#

        async before 20 ms updateOutput ();
        #>
      } else {
        // Reset user input string
        strncpy(sequence, "                ", 16);
        seq_n = 0;
      }

      // Break loop if user hits key q
      if (new_input == 'q') keepon = 0;
    }
  }

  // Enable canonical mode and echoing.
  setup_tty(DISABLE);
  RT_exit();

  <#
}