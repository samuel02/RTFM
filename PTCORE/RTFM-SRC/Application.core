// Shared data structure
// Protected by R_SData

#> 
#include <stdio.h>  // printf, etc.
#include <unistd.h> // sleep, etc.
typedef struct {
	int x;
	// ...
} SData;

volatile SData sd;

SData fast(SData fsd) {
	//...
	printf("fast\n");
	return fsd;
}

SData slow(SData ssd) {
	//...
	printf("slow start\n");
	sleep(2);
	printf("slow end\n");
	return ssd;
}

int readX() {
	//...
	printf("readX\n");
	return 0;
}

void writeX(int x) {
	//...
	printf("writeX %d\n", x);	
}

#define USER_RESET

void user_reset() {
	printf("User reset\n");
	int i = 0;
	<#pend TIMER0_IRQHandler;#>
	<#pend TIMER0_IRQHandler;#>
	<#pend TIMER0_IRQHandler;#>
	sleep(5);
	printf("User reset after sleep\n");
		
	while (i != 2) {
		printf("i = %d\n", i);
		//
		<#pend TIMER0_IRQHandler;#>
		i++;
		sleep(1);
	}
	printf("User reset exit\n");
}
<#
 
Func SData sd_get() { 
	#>printf("sd_get\n");<#	
	#> SData r; <#
	claim R_SData {
		#> r = sd; <#
	}
	#> return r; <#
}
 
Func void sd_set(SData s) {
	#>printf("sd_set\n");<#	
	claim R_SData {
		#> sd = s; <#
	}
}	


Task compute 3 {
	#>printf("calculate\n");<#
	#>//calculate 
	SData csd = <#sync sd_get();#>;
	// do some fancy interpolation on my
	csd = slow(csd);
	<#
	sync sd_set(csd);
}

ISR EINT0_IRQHandler 5 {
	#>printf("EINT0_IRQHandler\n");<#	
	#>//read hw  
	SData rsd; 
	rsd.x = readX(); //...
	rsd = fast(rsd);
	<#
    sync sd_set(rsd); 
} 				 

#>
volatile int cnt = 0;
#define MAX_CNT 3
int nr_invok = 0;
<#
 
ISR TIMER0_IRQHandler 7 {
	#>printf("TIMER0_IRQHandler %d\n", ++nr_invok);<#
	#>//write hw
	SData wsd = <# sync sd_get();#>;
	writeX(wsd.x); //...
	
	cnt = (cnt + 1) % MAX_CNT; 
	if (cnt == 0) {
		<#pend compute;#>
	}
	<#
}
