// Top-level C-code used for non-blocking user input
#>
#include <termios.h>
#include <string.h>

#define ENABLE 0
#define DISABLE 1
#define ORIGINAL_TIME 108

volatile int seconds = ORIGINAL_TIME;
char sequence[15];
int seq_n = 0;
const char* correct = "4 8 15 16 23 42";
int keepon = 1;

void setup_tty(int state) {
  struct termios ttystate;

  //get the terminal state
  tcgetattr(STDIN_FILENO, &ttystate);

  if (state == ENABLE) {
    //turn off canonical mode
    ttystate.c_lflag &= ~ICANON;
    //minimum of number input read.
    ttystate.c_cc[VMIN] = 1;
    // enable echo
    ttystate.c_lflag &= ~ECHO;
  } else if (state == DISABLE) {
    //turn on canonical mode
    ttystate.c_lflag |= ICANON;
    // disable echoing
    ttystate.c_lflag |= ECHO;
  }
  //set the terminal attributes.
  tcsetattr(STDIN_FILENO, TCSANOW, &ttystate);
}
<#

Task updateTimer () {
  claim Seconds {
    #> seconds--; <#
  }
  async after 1 s before 1 s updateTimer ();
  async before 20 ms updateOutput ();
}

Task updateOutput (){
  claim Sequence {
    #>
    printf("\r%03d%c[0;30;47m%02d%c[0;39;49m\t\t>:%s", seconds/60, 27, seconds%60, 27, sequence);
    int i;
    for (i=0; i<15-seq_n;i++) {
      printf("\b");
    }
    fflush(stdout);
    <#
  }
}


Reset {
  #>
  printf("User reset\n");
  strncpy(sequence, "               ", 15);
  <#
  async after 5 ms updateTimer();
}

Idle {
  #>
  char c;
  int new_input = 0;

  setup_tty(ENABLE);

  while(keepon) {

    new_input = fgetc(stdin);

    if (new_input != 0) {

      if (new_input == correct[seq_n]) {
        <#
          claim Sequence {
        #>
          sequence[seq_n] = new_input;
          seq_n++;
        <#
        }

        #>
        if (strncmp(correct, sequence, strlen(correct)) == 0) {
          printf("\07");
        <#
          claim Seconds {
            #> seconds = ORIGINAL_TIME; <#
          }
        #>
        }
        <#

        async before 20 ms updateOutput ();
        #>
      } else {
        // Reset user input string
        strncpy(sequence, "               ", 15);
        seq_n = 0;
      }

      if (new_input == 'q') keepon = 0;
    }
  }

  setup_tty(DISABLE);
  RT_exit();

  <#
}