
// Top-level C-code used for non-blocking user input
#>
#include <termios.h>
#include <string.h>

#define ENABLE 0
#define DISABLE 1

int seconds = 108*60;
char sequence[15];
int seq_n = 0;
const char* correct = "4 8 15 16 23 42";
int keepon = 1;

/* Non-blocking user input */
int kbhit() {
  struct timeval tv;
  fd_set fds;
  tv.tv_sec = 0;
  tv.tv_usec = 0;
  FD_ZERO(&fds);
  FD_SET(STDIN_FILENO, &fds); //STDIN_FILENO is 0
  select(STDIN_FILENO+1, &fds, NULL, NULL, &tv);
  return FD_ISSET(STDIN_FILENO, &fds);
}

void setup_tty(int state) {
  struct termios ttystate;

  //get the terminal state
  tcgetattr(STDIN_FILENO, &ttystate);

  if (state == ENABLE) {
    //turn off canonical mode
    ttystate.c_lflag &= ~ICANON;
    //minimum of number input read.
    ttystate.c_cc[VMIN] = 1;
    // enable echo
    ttystate.c_lflag &= ~ECHO;
  } else if (state == DISABLE) {
    //turn on canonical mode
    ttystate.c_lflag |= ICANON;
    // disable echoing
    ttystate.c_lflag |= ECHO;
  }
  //set the terminal attributes.
  tcsetattr(STDIN_FILENO, TCSANOW, &ttystate);
}

<#





Task updateTimer (){
  
  #>
    seconds--;
  <#
    #>
  if (keepon != 0) {
  <#
    async after 1 s before 1 ms updateTimer ();
  #>
  }
  <#
  async before 20 ms updateOutput ();

}

Task updateOutput (){
  claim Sequence {
    #>
    printf("\r%03d%c[0;30;47m%02d%c[0;39;49m\t\t>:%s", seconds/60, 27, seconds%60, 27, sequence);
    int i;
    for (i=0; i<15-seq_n;i++) {
      printf("\b");
    }
    fflush(stdout);
    <#
  }
}


Reset {
  #>
  printf("User reset\n");
  //strcpy(sequence, "                   ", 20);
  strncpy(sequence, "               ", 15);
  <#
  async after 5 ms updateTimer();
}

Idle {
  #>
  char c;
  int new_input = 0;

  setup_tty(ENABLE);

  while(keepon) {
    usleep(1);
    new_input = kbhit();
    if (new_input != 0) {
      c = fgetc(stdin);
      if (c == correct[seq_n]) {
        <# claim Sequence { #>
          sequence[seq_n] = c;
          seq_n++;
          <#
        }
        async before 20 ms updateOutput ();
        #>
      } else {
        strncpy(sequence, "               ", 15);    
        seq_n = 0;
      }

      if (c == 'q') {
        keepon = 0;
        nonblock(NB_DISABLE);


      } else {
        keepon = 1;
      }
    }

    //fprintf(stderr,"%d ", i);
  }

  setup_tty(DISABLE);
  RT_exit();

  <#

}


