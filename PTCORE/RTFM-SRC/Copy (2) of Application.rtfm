// Shared data structure
// Protected by R_SData
#> 
typedef struct {
	int x;
	// ...
} SData;

volatile SData sd;

SData fast(SData fsd) {
	//..
	return fsd;
}

SData slow(SData ssd) {
	//..
	return ssd;
}

int readX() {
	return 0;
}

void writeX() {
	//...
}

#define USER_RESET

void user_reset() {
	int i;
	for (i = 0; i < 5; i++) {
		
		sleep (1);
	}
}
<# 

Func SData sd_get() {
	#> SData r; <#
	claim R_SData {
		#> r = sd; <#
	}
	#> return r; <#
}

Func void sd_set(SData s) {
	claim R_SData {
		#> sd = s; <#
	}
}

Task compute 3 {
	#>//calculate 
	SData csd = <#sync sd_get();#>;
	// do some fancy interpolation on my
	csd = slow(csd);
	<#
	sync sd_set(csd);
}

ISR EINT0_IRQHandler 5 {
	#>//read hw  
	SData rsd; 
	rsd.x = readX(); //...
	rsd = fast(rsd);
	<#
	sync sd_set(rsd);
}

#>
volatile int cnt = 0;
#define MAX_CNT 5
<#

ISR TIMER0_IRQHandler 7 {
	#>//write hw
	SData wsd = <# sync sd_get();#>;
	writeX(wsd.x); //...
	
	cnt = (cnt + 1) % MAX_CNT; 
	if (cnt == 0) {
		<#pend compute;#>
	}
	<#
}
