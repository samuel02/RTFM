// Ex3d.core
// Per Lindgren (C) 2014
//
// Under threads (OSX/Linux/Win32) task execute in parallel and the dreaded 
// deadlock problem may arise. A distinct feature of the -core languge is it's 
// static task and resource (critical section) structure.
//  
// By static (compile time) analysis on the task model the RTFM-core compiler 
// reports potential deadlocks. A potential deadlock amounts to a cycle (of 
// strongly connected components) in the gc_res ouput graph.
//

Task t1() {
	#>printf("task1\n");<#
	claim R1 {
		#>printf("task1 R1 claimed\n");<#
		#>RT_usleep(RT_sec*1);<#
		claim R2 {
			#>printf("task1 R2 claimed\n");<#
		}
	}
}

Task t2() {
	#>printf("task2\n");<#
	claim R2 {
		#>printf("task2 R2 claimed\n");<#
		#>RT_usleep(RT_sec*1);<#
		claim R1 {
			#>printf("task2 R1 claimed\n");<#
		}
	}
}

Reset {
	#>printf("User reset\n");<#
	async t1();
	async t2();
}




